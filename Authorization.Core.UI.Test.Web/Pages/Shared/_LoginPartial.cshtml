@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@{
    var page = Context.Request.RouteValues["page"]?.ToString() ?? "/";
    var area = Context.Request.RouteValues["area"]?.ToString() ?? string.Empty;
}

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a  class="nav-link" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@User.Identity?.Name</a>
    </li>
    <li class="nav-item">
        <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/", new { area = area })" method="post" >
            <button  type="submit" class="nav-link btn btn-link">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
            <a class="nav-link" asp-area="Identity" asp-page="/Account/Register" asp-route-returnUrl="@Url.Page(page, new { area = area })">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="Identity" asp-page="/Account/Login" asp-route-returnUrl="@Url.Page(page, new { area = area })">Login</a>
    </li>
}
</ul>
